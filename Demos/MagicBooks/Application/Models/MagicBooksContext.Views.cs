//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System.Data.Entity.Infrastructure.MappingViews;

[assembly: DbMappingViewCacheTypeAttribute(
    typeof(BookSearch.Models.MagicBooksContext),
    typeof(Edm_EntityMappingGeneratedViews.ViewsForBaseEntitySets080c84172bbf6cce263044eede8178a960f47eefca6ee5056d74c2d2ec83cb67))]

namespace Edm_EntityMappingGeneratedViews
{
    using System;
    using System.CodeDom.Compiler;
    using System.Data.Entity.Core.Metadata.Edm;

    /// <summary>
    /// Implements a mapping view cache.
    /// </summary>
    [GeneratedCode("Entity Framework Power Tools", "0.9.0.0")]
    internal sealed class ViewsForBaseEntitySets080c84172bbf6cce263044eede8178a960f47eefca6ee5056d74c2d2ec83cb67 : DbMappingViewCache
    {
        /// <summary>
        /// Gets a hash value computed over the mapping closure.
        /// </summary>
        public override string MappingHashValue
        {
            get { return "080c84172bbf6cce263044eede8178a960f47eefca6ee5056d74c2d2ec83cb67"; }
        }

        /// <summary>
        /// Gets a view corresponding to the specified extent.
        /// </summary>
        /// <param name="extent">The extent.</param>
        /// <returns>The mapping view, or null if the extent is not associated with a mapping view.</returns>
        public override DbMappingView GetView(EntitySetBase extent)
        {
            if (extent == null)
            {
                throw new ArgumentNullException("extent");
            }

            var extentName = extent.EntityContainer.Name + "." + extent.Name;

            if (extentName == "CodeFirstDatabase.Book")
            {
                return GetView0();
            }

            if (extentName == "MagicBooksContext.Books")
            {
                return GetView1();
            }

            return null;
        }

        /// <summary>
        /// Gets the view for CodeFirstDatabase.Book.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView0()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Book
        [CodeFirstDatabaseSchema.Book](T1.Book_BookId, T1.Book_ISBN, T1.Book_Title, T1.Book_Author, T1.Book_Copies, T1.Book_Large, T1.Book_PublishDate)
    FROM (
        SELECT 
            T.BookId AS Book_BookId, 
            T.Isbn AS Book_ISBN, 
            T.Title AS Book_Title, 
            T.Author AS Book_Author, 
            T.Copies AS Book_Copies, 
            T.Large AS Book_Large, 
            T.PublishDate AS Book_PublishDate, 
            True AS _from0
        FROM MagicBooksContext.Books AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for MagicBooksContext.Books.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView1()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Books
        [BookSearch.Models.Book](T1.Book_BookId, T1.Book_Isbn, T1.Book_Title, T1.Book_Author, T1.Book_Copies, T1.Book_Large, T1.Book_PublishDate)
    FROM (
        SELECT 
            T.BookId AS Book_BookId, 
            T.ISBN AS Book_Isbn, 
            T.Title AS Book_Title, 
            T.Author AS Book_Author, 
            T.Copies AS Book_Copies, 
            T.Large AS Book_Large, 
            T.PublishDate AS Book_PublishDate, 
            True AS _from0
        FROM CodeFirstDatabase.Book AS T
    ) AS T1");
        }
    }
}
